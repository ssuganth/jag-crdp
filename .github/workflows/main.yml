# This is the main workflow that creates a new image and push to Openshift image stream which in turn triggers the deployment

name: Main - Build Image and Push to Openshift Registry for Dev Deployment

# Controls when the workflow will run
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
        app1:
            description: 'App Name (jag-crdp-transmit-receiver)'
            required: true
            default: 'jag-crdp-transmit-receiver'
        app2:
          description: 'App Name (jag-crdp-transmit-sender)'
          required: true
          default: 'jag-crdp-transmit-sender'
        app3:
          description: 'App Name (jag-crdp-process-scanner)'
          required: true
          default: 'jag-crdp-process-scanner'
        app4:
          description: 'App Name (jag-crdp-process-transformer)'
          required: true
          default: 'jag-crdp-process-transformer'
        env:
            description: 'Image Target Env'  
            required: true
            default: 'dev'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build-push-image:
    # The type of runner that the job will run on
    runs-on: ubuntu-20.04
    environment: ${{ github.event.inputs.env }}
    env:
      BASIC_AUTH_USER: ${{ secrets.BASIC_AUTH_USER }}
      BASIC_AUTH_PASS: ${{ secrets.BASIC_AUTH_PASS }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Git Checkout
        uses: actions/checkout@v2

      # Get the version number which is prefixed with the Github release branches in format release/{version}
      - name: Get Release Version
        run: |
          branch=${GITHUB_REF##*/}
          version=$(echo $branch | cut -d "/" -f2-)
          echo "releaseVersion=$version" >> $GITHUB_ENV

      # Get Git latest short Sha# from the release branch used. This Sha# will be used in image tagging as well as DC Pod labelling.
      - name: Get git commit short sha
        id: sha
        run: |
          shortSha=$(echo $(git rev-parse --short HEAD) | cut -c1-7)
          echo "gitsha=$shortSha" >> $GITHUB_ENV

      # Prints vital release paramters used
      - name: Print Release Variables
        run: |
          echo "Release Application: ${{ github.event.inputs.app }}"
          echo "Release Environment: ${{ github.event.inputs.env }}"
          echo "Release Version: ${{ env.releaseVersion }}"
          echo "Release Git Sha: ${{env.gitsha}}"

      # Set up JDK build environment
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11

      # Runs build steps
      - name: Maven Package
        run: mvn -ntp clean package

      - name: Maven Verify
        run: mvn -ntp clean verify

      - name: Maven Spotless Check
        run: mvn -ntp spotless:check
      
      # Build image jag-crdp-transmit-receiver
      - name: Build image jag-crdp-transmit-receiver
        env:
          COMPOSE_DOCKER_CLI_BUILD: 1
          DOCKER_BUILDKIT: 1
          CONTEXT: ./jag-crdp-transmit-receiver
        run: |
          docker build -t ${{github.event.inputs.app1}}:${{env.gitsha}} ${CONTEXT}

      # Build image jag-crdp-transmit-sender
      - name: Build image jag-crdp-transmit-sender
        env:
          COMPOSE_DOCKER_CLI_BUILD: 1
          DOCKER_BUILDKIT: 1
          CONTEXT: ./jag-crdp-transmit-sender
        run: |
          docker build -t ${{github.event.inputs.app2}}:${{env.gitsha}} ${CONTEXT}

      # Build image jag-crdp-process-scanner
      - name: Build image jag-crdp-process-scanner
        env:
          COMPOSE_DOCKER_CLI_BUILD: 1
          DOCKER_BUILDKIT: 1
          CONTEXT: ./jag-crdp-process-scanner
        run: |
          docker build -t ${{github.event.inputs.app3}}:${{env.gitsha}} ${CONTEXT}

      # Build image jag-crdp-process-transformer
      - name: Build image jag-crdp-process-transformer
        env:
          COMPOSE_DOCKER_CLI_BUILD: 1
          DOCKER_BUILDKIT: 1
          CONTEXT: ./jag-crdp-process-transformer
        run: |
          docker build -t ${{github.event.inputs.app4}}:${{env.gitsha}} ${CONTEXT}

      # Login to OpenShift Container Repository - Kamloops (OC GOLD)
      - name: Login to OpenShift Container Repository - Kamloops (OC GOLD)
        uses: docker/login-action@v1
        with:
          registry: ${{secrets.OPENSHIFT_EXTERNAL_REPOSITORY}}
          username: ${{secrets.OPENSHIFT_SA_USERNAME}}
          password: ${{secrets.OPENSHIFT_SA_PASSWORD}}

      # Push image jag-crdp-transmit-receiver to OpenShift Image stream - Kamloops (OC GOLD)
      - name: Push Image jag-crdp-transmit-receiver to Openshift Image Stream - Kamloops (OC GOLD)
        env:
          IMAGE: ${{secrets.OPENSHIFT_EXTERNAL_REPOSITORY}}/${{secrets.OPENSHIFT_TOOLS_NAMESPACE}}/${{github.event.inputs.app1}}:${{secrets.OPENSHIFT_ENV_TAG}}
        run: |
          docker tag ${{github.event.inputs.app1}}:${{env.gitsha}} ${IMAGE}
          docker push ${IMAGE}

      # Push image jag-crdp-transmit-sender to OpenShift Image stream - Kamloops (OC GOLD)
      - name: Push Image jag-crdp-transmit-sender to Openshift Image Stream - Kamloops (OC GOLD)
        env:
          IMAGE: ${{secrets.OPENSHIFT_EXTERNAL_REPOSITORY}}/${{secrets.OPENSHIFT_TOOLS_NAMESPACE}}/${{github.event.inputs.app2}}:${{secrets.OPENSHIFT_ENV_TAG}}
        run: |
          docker tag ${{github.event.inputs.app2}}:${{env.gitsha}} ${IMAGE}
          docker push ${IMAGE}

      # Push image jag-crdp-process-scanner to OpenShift Image stream - Kamloops (OC GOLD)
      - name: Push Image jag-crdp-process-scanner to Openshift Image Stream - Kamloops (OC GOLD)
        env:
          IMAGE: ${{secrets.OPENSHIFT_EXTERNAL_REPOSITORY}}/${{secrets.OPENSHIFT_TOOLS_NAMESPACE}}/${{github.event.inputs.app3}}:${{secrets.OPENSHIFT_ENV_TAG}}
        run: |
          docker tag ${{github.event.inputs.app3}}:${{env.gitsha}} ${IMAGE}
          docker push ${IMAGE}

      # Push image jag-crdp-process-transformer to OpenShift Image stream - Kamloops (OC GOLD)
      - name: Push Image jag-crdp-process-transformer to Openshift Image Stream - Kamloops (OC GOLD)
        env:
          IMAGE: ${{secrets.OPENSHIFT_EXTERNAL_REPOSITORY}}/${{secrets.OPENSHIFT_TOOLS_NAMESPACE}}/${{github.event.inputs.app4}}:${{secrets.OPENSHIFT_ENV_TAG}}
        run: |
          docker tag ${{github.event.inputs.app4}}:${{env.gitsha}} ${IMAGE}
          docker push ${IMAGE}
      
#      # Login to OpenShift Container Repository - Calgary (OC GOLDDR)
#      - name: Login to OpenShift Container Repository - Calgary (OC GOLDDR)
#        uses: docker/login-action@v1
#        with:
#          registry: ${{secrets.OPENSHIFT_EXTERNAL_REPOSITORY_DR}}
#          username: ${{secrets.OPENSHIFT_SA_USERNAME}}
#          password: ${{secrets.OPENSHIFT_SA_PASSWORD_DR}}
#
#      # Push image jag-crdp-transmit-receiver to OpenShift Image stream - Calgary (OC GOLDDR)
#      - name: Push Image jag-crdp-transmit-receiver to Openshift Image Stream - Calgary (OC GOLDDR)
#        env:
#          IMAGE: ${{secrets.OPENSHIFT_EXTERNAL_REPOSITORY_DR}}/${{secrets.OPENSHIFT_TOOLS_NAMESPACE}}/${{github.event.inputs.app}}:${{secrets.OPENSHIFT_ENV_TAG}}
#        run: |
#          docker tag ${{github.event.inputs.app1}}:${{env.gitsha}} ${IMAGE}
#          docker push ${IMAGE}
#
#      # Push image jag-crdp-transmit-sender to OpenShift Image stream - Calgary (OC GOLDDR)
#      - name: Push Image jag-crdp-transmit-sender to Openshift Image Stream - Calgary (OC GOLDDR)
#        env:
#          IMAGE: ${{secrets.OPENSHIFT_EXTERNAL_REPOSITORY_DR}}/${{secrets.OPENSHIFT_TOOLS_NAMESPACE}}/${{github.event.inputs.app}}:${{secrets.OPENSHIFT_ENV_TAG}}
#        run: |
#          docker tag ${{github.event.inputs.app2}}:${{env.gitsha}} ${IMAGE}
#          docker push ${IMAGE}
#
#      # Push image jag-crdp-process-scanner to OpenShift Image stream - Calgary (OC GOLDDR)
#      - name: Push Image jag-crdp-process-scanner to Openshift Image Stream - Calgary (OC GOLDDR)
#        env:
#          IMAGE: ${{secrets.OPENSHIFT_EXTERNAL_REPOSITORY_DR}}/${{secrets.OPENSHIFT_TOOLS_NAMESPACE}}/${{github.event.inputs.app}}:${{secrets.OPENSHIFT_ENV_TAG}}
#        run: |
#          docker tag ${{github.event.inputs.app3}}:${{env.gitsha}} ${IMAGE}
#          docker push ${IMAGE}
#
#      # Push image jag-crdp-process-transformer to OpenShift Image stream - Calgary (OC GOLDDR)
#      - name: Push Image jag-crdp-process-transformer to Openshift Image Stream - Calgary (OC GOLDDR)
#        env:
#          IMAGE: ${{secrets.OPENSHIFT_EXTERNAL_REPOSITORY_DR}}/${{secrets.OPENSHIFT_TOOLS_NAMESPACE}}/${{github.event.inputs.app}}:${{secrets.OPENSHIFT_ENV_TAG}}
#        run: |
#          docker tag ${{github.event.inputs.app4}}:${{env.gitsha}} ${IMAGE}
#          docker push ${IMAGE}
      
      # Login to Openshift using OC SA and Token of respective env. for Pod labelling - Kamloops (OC GOLD)
      - name: Authenticate OC Env Specific SA - Kamloops (OC GOLD)
        uses: redhat-actions/oc-login@v1
        env:
          OPENSHIFT_NAMESPACE: ${{secrets.OPENSHIFT_LICENSE_PLATE}}-${{ github.event.inputs.env }}
          OPENSHIFT_USER: ${{secrets.OPENSHIFT_SA_Env_DEPLOYER_NAME}}
        with:
          openshift_server_url: ${{secrets.OPENSHIFT_SERVER_URL}}
          openshift_token: ${{secrets.OPENSHIFT_SA_ENV_DEPLOYER_TOKEN}}
          namespace: ${OPENSHIFT_NAMESPACE}

      # Labels the deployment config of the application jag-crdp-transmit-receiver with release version number to spin up the pods labelled in same version - Kamloops (OC GOLD)
      - name: Labelling DC of jag-crdp-transmit-receiver to release version - Kamloops (OC GOLD)
        env:
          releaseVersion: ${{ env.releaseVersion }}
          appName: ${{ github.event.inputs.app1 }}
          openshiftEnvNamespace: ${{secrets.OPENSHIFT_LICENSE_PLATE}}-${{ github.event.inputs.env }}
        run: |
          oc patch dc ${appName} -n ${openshiftEnvNamespace} --patch '{"spec":{"template":{"metadata":{"labels":{"version":"${{ env.releaseVersion }}.${{ env.gitsha }}"}}}}}'

      # Wait to DC rollout of jag-crdp-transmit-receiver to get completed before proceeding next stage - Kamloops (OC GOLD)
      - name: Wait for DC rollout of jag-crdp-transmit-receiver - Kamloops (OC GOLD)
        env:
          appName: ${{ github.event.inputs.app1 }}
          openshiftEnvNamespace: ${{secrets.OPENSHIFT_LICENSE_PLATE}}-${{ github.event.inputs.env }}
        run: |
          oc rollout status -n ${openshiftEnvNamespace} dc/${appName} --watch

      # Labels the deployment config of the application of jag-crdp-transmit-sender with release version number to spin up the pods labelled in same version - Kamloops (OC GOLD)
      - name: Labelling DC of jag-crdp-transmit-sender to release version - Kamloops (OC GOLD)
        env:
          releaseVersion: ${{ env.releaseVersion }}
          appName: ${{ github.event.inputs.app2 }}
          openshiftEnvNamespace: ${{secrets.OPENSHIFT_LICENSE_PLATE}}-${{ github.event.inputs.env }}
        run: |
          oc patch dc ${appName} -n ${openshiftEnvNamespace} --patch '{"spec":{"template":{"metadata":{"labels":{"version":"${{ env.releaseVersion }}.${{ env.gitsha }}"}}}}}'

      # Wait to DC rollout of jag-crdp-transmit-sender to get completed before proceeding next stage - Kamloops (OC GOLD)
      - name: Wait for DC rollout of jag-crdp-transmit-sender - Kamloops (OC GOLD)
        env:
          appName: ${{ github.event.inputs.app2 }}
          openshiftEnvNamespace: ${{secrets.OPENSHIFT_LICENSE_PLATE}}-${{ github.event.inputs.env }}
        run: |
          oc rollout status -n ${openshiftEnvNamespace} dc/${appName} --watch

      # Labels the deployment config of the application of jag-crdp-process-scanner with release version number to spin up the pods labelled in same version - Kamloops (OC GOLD)
      - name: Labelling DC of jag-crdp-process-scanner to release version - Kamloops (OC GOLD)
        env:
          releaseVersion: ${{ env.releaseVersion }}
          appName: ${{ github.event.inputs.app3 }}
          openshiftEnvNamespace: ${{secrets.OPENSHIFT_LICENSE_PLATE}}-${{ github.event.inputs.env }}
        run: |
          oc patch dc ${appName} -n ${openshiftEnvNamespace} --patch '{"spec":{"template":{"metadata":{"labels":{"version":"${{ env.releaseVersion }}.${{ env.gitsha }}"}}}}}'

      # Wait to DC rollout of jag-crdp-process-scanner to get completed before proceeding next stage - Kamloops (OC GOLD)
      - name: Wait for DC rollout of jag-crdp-process-scanner - Kamloops (OC GOLD)
        env:
          appName: ${{ github.event.inputs.app3 }}
          openshiftEnvNamespace: ${{secrets.OPENSHIFT_LICENSE_PLATE}}-${{ github.event.inputs.env }}
        run: |
          oc rollout status -n ${openshiftEnvNamespace} dc/${appName} --watch

      # Labels the deployment config of the application of jag-crdp-process-transformer with release version number to spin up the pods labelled in same version - Kamloops (OC GOLD)
      - name: Labelling DC of jag-crdp-process-transformer to release version - Kamloops (OC GOLD)
        env:
          releaseVersion: ${{ env.releaseVersion }}
          appName: ${{ github.event.inputs.app4 }}
          openshiftEnvNamespace: ${{secrets.OPENSHIFT_LICENSE_PLATE}}-${{ github.event.inputs.env }}
        run: |
          oc patch dc ${appName} -n ${openshiftEnvNamespace} --patch '{"spec":{"template":{"metadata":{"labels":{"version":"${{ env.releaseVersion }}.${{ env.gitsha }}"}}}}}'

      # Wait to DC rollout of jag-crdp-process-transformer to get completed before proceeding next stage - Kamloops (OC GOLD)
      - name: Wait for DC rollout of jag-crdp-process-transformer - Kamloops (OC GOLD)
        env:
          appName: ${{ github.event.inputs.app4 }}
          openshiftEnvNamespace: ${{secrets.OPENSHIFT_LICENSE_PLATE}}-${{ github.event.inputs.env }}
        run: |
          oc rollout status -n ${openshiftEnvNamespace} dc/${appName} --watch

#      # Login to Openshift using OC SA and Token of respective env. for Pod labelling - Calgary (OC GOLDDR)
#      - name: Authenticate OC Env Specific SA - Calgary (OC GOLDDR)
#        uses: redhat-actions/oc-login@v1
#        env:
#          OPENSHIFT_NAMESPACE: ${{secrets.OPENSHIFT_LICENSE_PLATE}}-${{ github.event.inputs.env }}
#          OPENSHIFT_USER: ${{secrets.OPENSHIFT_SA_Env_DEPLOYER_NAME}}
#        with:
#          openshift_server_url: ${{secrets.OPENSHIFT_SERVER_URL_DR}}
#          openshift_token: ${{secrets.OPENSHIFT_SA_ENV_DEPLOYER_TOKEN_DR}}
#          namespace: ${OPENSHIFT_NAMESPACE}
#
#      # Labels the deployment config of the application of jag-crdp-transmit-receiver with release version number to spin up the pods labelled in same version - Calgary (OC DR)
#      - name: Labelling DC of jag-crdp-transmit-receiver to release version - Calgary (OC GOLDDR)
#        env:
#          releaseVersion: ${{ env.releaseVersion }}
#          appName: ${{ github.event.inputs.app1 }}
#          openshiftEnvNamespace: ${{secrets.OPENSHIFT_LICENSE_PLATE}}-${{ github.event.inputs.env }}
#        run: |
#          oc patch dc ${appName} -n ${openshiftEnvNamespace} --patch '{"spec":{"template":{"metadata":{"labels":{"version":"${{ env.releaseVersion }}.${{ env.gitsha }}"}}}}}'
#
#      # Wait to DC rollout of jag-crdp-transmit-receiver to get completed before proceeding next stage - Calgary (OC GOLDDR)
#      - name: Wait for DC rollout of jag-crdp-transmit-receiver - Calgary (OC GOLDDR)
#        env:
#          appName: ${{ github.event.inputs.app1 }}
#          openshiftEnvNamespace: ${{secrets.OPENSHIFT_LICENSE_PLATE}}-${{ github.event.inputs.env }}
#        run: |
#          oc rollout status -n ${openshiftEnvNamespace} dc/${appName} --watch
#
#      # Labels the deployment config of the application of jag-crdp-transmit-sender with release version number to spin up the pods labelled in same version - Calgary (OC DR)
#      - name: Labelling DC of jag-crdp-transmit-sender to release version - Calgary (OC GOLDDR)
#        env:
#          releaseVersion: ${{ env.releaseVersion }}
#          appName: ${{ github.event.inputs.app2 }}
#          openshiftEnvNamespace: ${{secrets.OPENSHIFT_LICENSE_PLATE}}-${{ github.event.inputs.env }}
#        run: |
#          oc patch dc ${appName} -n ${openshiftEnvNamespace} --patch '{"spec":{"template":{"metadata":{"labels":{"version":"${{ env.releaseVersion }}.${{ env.gitsha }}"}}}}}'
#
#      # Wait to DC rollout of jag-crdp-transmit-sender to get completed before proceeding next stage - Calgary (OC GOLDDR)
#      - name: Wait for DC rollout of jag-crdp-transmit-sender - Calgary (OC GOLDDR)
#        env:
#          appName: ${{ github.event.inputs.app2 }}
#          openshiftEnvNamespace: ${{secrets.OPENSHIFT_LICENSE_PLATE}}-${{ github.event.inputs.env }}
#        run: |
#          oc rollout status -n ${openshiftEnvNamespace} dc/${appName} --watch
#
#      # Labels the deployment config of the application of jag-crdp-process-scanner with release version number to spin up the pods labelled in same version - Calgary (OC DR)
#      - name: Labelling DC of jag-crdp-process-scanner to release version - Calgary (OC GOLDDR)
#        env:
#          releaseVersion: ${{ env.releaseVersion }}
#          appName: ${{ github.event.inputs.app3 }}
#          openshiftEnvNamespace: ${{secrets.OPENSHIFT_LICENSE_PLATE}}-${{ github.event.inputs.env }}
#        run: |
#          oc patch dc ${appName} -n ${openshiftEnvNamespace} --patch '{"spec":{"template":{"metadata":{"labels":{"version":"${{ env.releaseVersion }}.${{ env.gitsha }}"}}}}}'
#
#      # Wait to DC rollout of jag-crdp-process-scanner to get completed before proceeding next stage - Calgary (OC GOLDDR)
#      - name: Wait for DC rollout of jag-crdp-process-scanner - Calgary (OC GOLDDR)
#        env:
#          appName: ${{ github.event.inputs.app3 }}
#          openshiftEnvNamespace: ${{secrets.OPENSHIFT_LICENSE_PLATE}}-${{ github.event.inputs.env }}
#        run: |
#          oc rollout status -n ${openshiftEnvNamespace} dc/${appName} --watch
#
#      # Labels the deployment config of the application of jag-crdp-process-transformer with release version number to spin up the pods labelled in same version - Calgary (OC DR)
#      - name: Labelling DC of jag-crdp-process-transformer to release version - Calgary (OC GOLDDR)
#        env:
#          releaseVersion: ${{ env.releaseVersion }}
#          appName: ${{ github.event.inputs.app4 }}
#          openshiftEnvNamespace: ${{secrets.OPENSHIFT_LICENSE_PLATE}}-${{ github.event.inputs.env }}
#        run: |
#          oc patch dc ${appName} -n ${openshiftEnvNamespace} --patch '{"spec":{"template":{"metadata":{"labels":{"version":"${{ env.releaseVersion }}.${{ env.gitsha }}"}}}}}'
#
#      # Wait to DC rollout of jag-crdp-process-transformer to get completed before proceeding next stage - Calgary (OC GOLDDR)
#      - name: Wait for DC rollout of jag-crdp-process-transformer - Calgary (OC GOLDDR)
#        env:
#          appName: ${{ github.event.inputs.app4 }}
#          openshiftEnvNamespace: ${{secrets.OPENSHIFT_LICENSE_PLATE}}-${{ github.event.inputs.env }}
#        run: |
#          oc rollout status -n ${openshiftEnvNamespace} dc/${appName} --watch
